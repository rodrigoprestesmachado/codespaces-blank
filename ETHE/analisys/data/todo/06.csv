"Rol","Mensaje","Fecha"
"User","Modifica el primer constructor para que cuando se construyan objetos de la clase, estos se uniformicen automáticamente haciendo las siguientes operaciones:  Si el denominador es negativo, multiplica numerador y denominador por -1. ten en cuenta que ya he definido toda la clase","19:02:48 - 12/02/2025"
"semantic_search","","19:02:48 - 12/02/2025"
"CharlieBOT","public class Fraction {     private int numerator;     private int denominator;      public Fraction(int numerator, int denominator) {         if (denominator < 0) {             this.numerator = -numerator;             this.denominator = -denominator;         } else {             this.numerator = numerator;             this.denominator = denominator;         }     }      // Other methods and constructors... }","19:02:50 - 12/02/2025"
"User","Simplifica la fracción dividiendo numerador y denominador por su máximo común divisor. Probablemente sea una buena decisión de diseño crear un método auxiliar privado que implemente estas operaciones, e invocarlo desde el constructor. Para calcular el máximo común divisor de dos números puedes copiar el siguiente método en tu clase: private int gcd() { int a = /* put here the attribute that represents the numerator / int b = / put here the attribute that represents the denominator */ while (b != 0) { int tmp = b; b = a % b; a = tmp; } if (a < 0) { a = -a; } return a; }","19:04:25 - 12/02/2025"
"semantic_search","Knuth, 1974 Cálculo del factorial fac(n) = n! = n*(n-1)(n-2)…21  (con n > 0 y m = 1) public static long fac(int n, int m){    if (n<=1){       return m;    }     else{       return fac(n-1, n*m);    } }  public static long fac(int n, int m){     while (! (n <= 1)){         m = n * m;         n = n - 1;     }     return m; }  RecursiónIteración Ejercicio 4 Implementa el método recursivo mcd(int a, int b) el cual permite calcular el máximo común divisor de dos números enteros. Ejercicio 5 Implementa el método recursivo decToBin(int decimal, String binary) el cual recibe un número decimal y devuelve una cadena con el equivalente en binario de dicho número decimal. Resumen  Identificar el rango de valores para terminación Caso(s) base y caso(s) recursivos que se aproximan al base Recursión lineal (máx. 1 llamada recursiva por rama) Por la cola (resultado en la última operación y fácilmente convertible a bucle) No por la cola (cálculo costoso)   Recursión no lineal (más de 1 llamada recursiva en alguna rama) Cascada o anidada","19:04:25 - 12/02/2025"
"CharlieBOT","public class Fraction {     private int numerator;     private int denominator;      public Fraction(int numerator, int denominator) {         if (denominator < 0) {             this.numerator = -numerator;             this.denominator = -denominator;         } else {             this.numerator = numerator;             this.denominator = denominator;         }         simplify();     }      private void simplify() {         int gcd = gcd();         this.numerator /= gcd;         this.denominator /= gcd;     }      private int gcd() {         int a = Math.abs(this.numerator);         int b = Math.abs(this.denominator);         while (b != 0) {             int tmp = b;             b = a % b;             a = tmp;         }         return a;     }      // Other methods and constructors... }","19:04:28 - 12/02/2025"

