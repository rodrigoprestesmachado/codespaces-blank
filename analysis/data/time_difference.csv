Id;Role;Message;Datetime;Classification;AI - 4%;AI - 1%;AI - 2%;AI - 3%;Time Difference
EnmUUqhaSo62Rne;User;como pasar los valores de una cola a otra;2024-06-25 15:08:17;Complete Solution;No;;;;0 days 00:00:00
EnmUUqhaSo62Rne;User;como dentro de un metodo se puede crear una cola;2024-06-25 15:08:34;Debugging Help;No;;;;
EnmUUqhaSo62Rne;User;"public void removeItem(E item) {
    Node<E> aux=new Node<E>();
    aux=top;
    int cont=0;
    while(aux.getInfo()!=item) {
        aux=aux.getNext();
        cont++;	
    }
    Node<E> aux1=new Node<E>();
    aux1=top;
    for(int i=0;i>=cont-1;i++) {
        aux1=aux1.getNext();
    }
    aux1.setNext(aux.getNext().getNext());
}";2024-06-25 18:38:59;Debugging Help;Yes;;;;
EnmUUqhaSo62Rne;User;"public abstract class LBTreeTree implements BTree{
    public int getNumberWizards (String hogwartsHouse) {
        int Gryff=0;
        int Slyth=0;
        int Huff=0;
        int Raven=0;
        
        if(getInfo()==null) {
            return 0;
        }
        if(getInfo().equals(""Gryffindor"")){
            return Gryff++ +getLeft().getNumberWizards(hogwartsHouse)+getRight().getNumberWizards(hogwartsHouse);
        }
        if(getInfo().equals(""Slytherin"")){
            return Slyth++ +getLeft().getNumberWizards(hogwartsHouse)+getRight().getNumberWizards(hogwartsHouse);
        }
        if(getInfo().equals(""Huffelpough"")){
            return Huff++ +getLeft().getNumberWizards(hogwartsHouse)+getRight().getNumberWizards(hogwartsHouse);
        }
        if(getInfo().equals(""Ravenclaw"")){
            return Raven++ +getLeft().getNumberWizards(hogwartsHouse)+getRight().getNumberWizards(hogwartsHouse);
        }
        return 0;
    }
}";2024-06-25 20:51:37;Debugging Help;Yes;;;;
EnmUUqhaSo62Rne;User;"que hace este codigo public int getNumberWizards (String hogwartsHouse) { int num_wizards = 0; if (!isEmpty()) { if ((((Wizard) (getInfo())).getHogwartsHouse()).equals( (hogwartsHouse)) { num_wizards num_wizards + 1; } num_wizards += getRight().getNumberWizards (hogwartsHouse) + getLeft().getNumberWizards (hogwartsHouse); } return num_wizards; }";2024-06-25 20:55:21;Debugging Help;Yes;;;;
EnmUUqhaSo62Rne;User;español;2024-06-25 20:55:48;Language change;Yes;;;;
EnmUUqhaSo62Rne;User;wizard es una clase y el getHogwarts house es unn metododo get de un atributo de la clase javaa;2024-06-25 20:57:07;Student correction;Yes;;;;
EnmUUqhaSo62Rne;User;porque aparece ahí wizard;2024-06-25 20:57:26;Debugging Help;Yes;;;;
EnmUUqhaSo62Rne;User;si no hiciese el casting q error daria;2024-06-25 20:57:50;Debugging Help;Yes;;;;
EnmUUqhaSo62Rne;User;pero porque no vale sin el casting;2024-06-25 20:58:29;Debugging Help;Yes;;;;
EnmUUqhaSo62Rne;User;si crease un obejeto de la clase wizard y metiese el getHogwartsHouse valdria?;2024-06-25 20:59:11;Debugging Help;Yes;;;;
EnmUUqhaSo62Rne;User;"Wizard harryPotter = new Wizard(getHogwartsHouse()); esto esta bien?";2024-06-25 21:00:05;Debugging Help;Yes;;;;
EnmUUqhaSo62Rne;User;Complete el método main de la clase WizardsHogwarts para crear el árbol binario mostrado anteriormente (ver Figura 1) a partir de los nodos creados que se proporcionan en el código. Emplee las clases mostradas anteriormente.;2024-06-25 21:03:51;Complete Solution;Yes;;;;0 days 00:00:00
EnmUUqhaSo62Rne;User;"public class WizardsHogwarts { public static void main(String[] args) { Wizard w1 = new Wizard(""Harry Potter"", ""Gryffindor""); BTree t1 = new LBTree (w1); Wizard w2 = new Wizard(""Draco Malfoy"", ""Slytherin""); BTree t2 = new LBTree (w2); Wizard w3 = new Wizard (""Luna Lovegood"", ""Ravenclaw""); BTree t3= new LBTree (w3); Wizard w4 new Wizard(""Cedric Diggory"", ""Hufflepuff""); BTree t4 new LBTree (w4); Wizard w5 = new Wizard (""Ginny Weasley"", ""Gryffindor""); BTree t5= new LBTree  (w5); Wizard w6 new Wizard(""Cho Chang"", ""Ravenclaw""); BTree t6 new LBTree  (w6); Wizard w7 = new Wizard(""Hermione Granger"", ""Gryffindor""); BTree t7 new LBTree (w7); //3.2 complete the main method } }";2024-06-25 21:04:07;Complete Solution;Yes;;;;0 days 00:00:00
EnmUUqhaSo62Rne;User;Complete el método main de la clase WizardsHogwarts para crear el árbol binario mostrado anteriormente (ver Figura 1) a partir de los nodos creados que se proporcionan en el código. Emplee las clases mostradas anteriormente. el arbol odenado en preorder es (Harry,Draco,Cedric,Hermione,Luna,Ginny,Cho);2024-06-25 21:05:11;Complete Solution;Yes;;;;0 days 00:00:00
EnmUUqhaSo62Rne;User;"esta es la solucion t4.insert(t7, BTree.RIGHT); t2.insert(t4, BTree. LEFT); t1.insert(t2, BTree. LEFT); t3.insert(t5, BTree. LEFT); t3.insert(t6, BTree.RIGHT); t1.insert(t3, BTree. RIGHT);";2024-06-25 21:06:43;Complete Solution;Yes;;;;0 days 00:00:00
EnmUUqhaSo62Rne;User;explicame porque esa es la solucion;2024-06-25 21:07:02;Conceptual Questions;Yes;;;;
EnmUUqhaSo62Rne;User;el metodo insert cual es su codigo;2024-06-25 21:08:31;Code Snippet;Yes;;;;
EnmUUqhaSo62Rne;User;porque no puedes;2024-06-25 21:08:46;Uncategorized;Yes;;;;
EnmUUqhaSo62Rne;User;te lo prohiben;2024-06-25 21:09:03;Uncategorized;Yes;;;;
EnmUUqhaSo62Rne;User;pues entonces como funciona el metodo insert que has usado antes;2024-06-25 21:09:27;Debugging Help;Yes;;;;
pqL6H1Lu8lREjQb;User;"Dado las clases Program  
class Animal { 
    public void makeSound() { 
        System.out.println(""Animal is making a sound""); 
    } 
} 
class Dog extends Animal { 
    public void makeSound() { 
        System.out.println(""Dog is barking""); 
    } 
} 
class Cat extends Animal { 
    public static void makeSound(int noise) { 
        if(noise ==0) { 
            System.out.println(""Cat is meowing""); 
        } else { 
            System.out.println(""Cat is purring""); 
        } 
    } 
} 
public class Program{ 
    public static void main(String[] args) { 
        Animal animal1 = new Animal(); 
        Animal animal2 = new Dog(); 
        Cat animal3 = new Cat(); 
        animal1.makeSound(); 
        animal2.makeSound(); 
        Cat.makeSound(1); 
    } 
} 
a) Imprime: Animal is making a sound; Dog is barking;Cat is purring;  
b) Imprime:Animal is making a sound; Animal is making a sound;Animal is making a sound; 
c) Da error de compilación, porque animal2 debería ser declarado como Dog. 
d) Da error de compilación, porque la sentencia ""Cat.makeSound(1)"" es incorrecta.";2024-06-25 10:53:20;Multiple Question Exercise;Yes;;;;
pqL6H1Lu8lREjQb;User;"DadaslasclasesPersonyStudent, dondelasegundaheredadelaprimera,indicaquéafirmación es correcta: 
a) Person p1= new Student(); Es válido y se conoce como upcasting.􏰀 
b) Person p1= new Student(); No es válido. 
c) Student s1= new Person(); Es válido y se conoce como downcasting explícito. 
d) Person p2= new (Person) Student(); Es válido y se conoce como upcasting.";2024-06-25 10:55:09;Multiple Question Exercise;Yes;;;;
pqL6H1Lu8lREjQb;User;"Estás realizando la prueba de caja negra del método sqrt(double num), que calcula la raíz cuadrada del argumento num. ¿Qué conjunto de valores se utilizaría para realizar la prueba de caja negra de este método considerando todas las clases de equivalencia y valores frontera? 
a) -1,0y3 
b) 0,1y2 
c) 0.1,2y5 
d) -2,-1y0";2024-06-25 10:55:37;Multiple Question Exercise;Yes;;;;
pqL6H1Lu8lREjQb;User;En un árbol binario completo el número de nodos externos es menor que el número hojas;2024-06-25 13:44:18;Conceptual Questions;Yes;;;;
pqL6H1Lu8lREjQb;User;que es top() en una pila;2024-06-25 20:32:43;Conceptual Questions;Yes;;;;
c2BuztnHmO6uMXX;User;Give me an example of a recursive method in Java;2024-07-04 09:17:14;Code Snippet;;Yes;;;
1LIlNQ39QRzunj8;User;dime la complejidad de los algoritmos selection, inserion , bubble y quicksort;2024-06-23 16:19:35;Conceptual Questions;;Yes;;;
1LIlNQ39QRzunj11;User;ordena el array 5,1,10,9 3 de manera ascendente con quicksort;2024-06-23 16:24:32;Complete Solution;;Yes;;;0 days 00:00:00
1LIlNQ39QRzunj14;User;cuantos pasos son necesarios;2024-06-23 16:25:14;Debugging Help;;No;;;
1LIlNQ39QRzunj17;User;haz los pasos sin codigo;2024-06-23 16:25:25;Debugging Help;;No;;;
1LIlNQ39QRzunj20;User;encuantas operaaciones de intercambio, o swaps has utilizado;2024-06-23 16:26:31;Debugging Help;;No;;;
1LIlNQ39QRzunj23;User;necesto que metas un nodo en una cola que esta vacia;2024-06-24 13:44:36;Code Snippet;;Yes;;;
1LIlNQ39QRzunj26;User;utiliza el metodo enqueue;2024-06-24 13:45:30;Code Snippet;;Yes;;;
1LIlNQ39QRzunj29;User;cuando una recursion es por cascada y cuando es anidada;2024-06-24 16:57:17;Conceptual Questions;;Yes;;;
1LIlNQ39QRzunj32;User;para que sirve el distintio final;2024-06-25 07:38:28;Conceptual Questions;;Yes;;;
1LIlNQ39QRzunj35;User;par que sirve static;2024-06-25 07:39:47;Conceptual Questions;;Yes;;;
1LIlNQ39QRzunj38;User;en un ejercicio de arboles cuando hay que poner tree.isempty() y cuando vale con poner isempty() solo;2024-06-25 09:08:11;Conceptual Questions;;Yes;;;
1LIlNQ39QRzunj41;User;cual es el metodo mas eficiente segun las complejidades;2024-06-25 12:30:38;Conceptual Questions;;Yes;;;
1LIlNQ39QRzunj44;User;es mas eficiente log n o nlogn;2024-06-25 12:31:00;Conceptual Questions;;Yes;;;
1LIlNQ39QRzunj47;User;como se implementa el metodo compareto;2024-06-25 13:46:29;Code Snippet;;Yes;;;
1LIlNQ39QRzunj50;User;a que se refiere la palabra this en java;2024-06-25 15:52:08;Conceptual Questions;;Yes;;;
1LIlNQ39QRzunj53;User;COMO FUNCIONA SUPER;2024-06-25 20:45:25;Conceptual Questions;;Yes;;;
1LIlNQ39QRzunj56;User;haz un metodo recursivo que dado un arbol de strings devuelva el numero de nodos hoja de dicho arbol;2024-06-25 21:52:15;Complete Solution;;Yes;;;0 days 00:00:00
1LIlNQ39QRzunj59;User;como funciona heapsort;2024-06-26 12:14:52;Conceptual Questions;;Yes;;;
1LIlNQ39QRzunj62;User;aplicalo para ordenar 5,3,4,1,2 de menor a mayor;2024-06-26 12:16:24;Complete Solution;;Yes;;;0 days 00:00:00
1LIlNQ39QRzunj65;User;explica los swaps sin el codigo;2024-06-26 12:16:42;Debugging Help;;No;;;
1LIlNQ39QRzunj68;User;hazlo con el ejemplo;2024-06-26 12:16:56;Debugging Help;;No;;;
1LIlNQ39QRzunj71;User;cuantos swaps has hecho;2024-06-26 12:20:31;Debugging Help;;No;;;
1LIlNQ39QRzunj74;User;para que sirve static;2024-06-26 13:01:21;Conceptual Questions;;Yes;;;
lnCzV73IVMVx2g3;User;que hacia el codigo max;2024-06-24 15:22:22;Conceptual Questions;;;Yes;;
lnCzV73IVMVx2g6;User;que es StackOverflowError;2024-06-24 18:29:43;Conceptual Questions;;;Yes;;
lnCzV73IVMVx2g9;User;buenas, como va AssertEquals;2024-06-25 09:50:23;Conceptual Questions;;;Yes;;
lnCzV73IVMVx2g12;User;que es el argumento de precision de AssertEquals;2024-06-25 09:51:22;Conceptual Questions;;;Yes;;
lnCzV73IVMVx2g15;User;si una clase extiende de una clase abstracta tiene que ser abstracta?;2024-06-25 20:41:50;Conceptual Questions;;;Yes;;
lnCzV73IVMVx2g18;User;¿una interfaz puede extender de otra interfaz?;2024-06-25 20:44:09;Conceptual Questions;;;Yes;;
lnCzV73IVMVx2g21;User;y ¿una interfaz puede implementar otra?;2024-06-25 20:44:40;Conceptual Questions;;;Yes;;
lnCzV73IVMVx2g24;User;en una interfaz los atributos tienen que ser estaticos?;2024-06-26 12:49:51;Conceptual Questions;;;Yes;;
TTdykpdTOfRVBfX;User;"while(first!=null){
    
}";2024-06-26 09:21:07;Code Snippet;;;No;;
TTdykpdTOfRVBfX;User;"while(first!=null){
    System.out.println(first.getInfo())
    first=first.getNext()
}";2024-06-26 09:23:01;Debugging Help;;;No;;
TTdykpdTOfRVBfX;User;it is a linked list with 10 nodes , how many nodes will it have after doing the code;2024-06-26 09:24:08;Debugging Help;;;No;;
TTdykpdTOfRVBfX;User;it an excersice i have to practice and i need to know the answer;2024-06-26 09:24:43;Uncategorized;;;Yes;;
TTdykpdTOfRVBfX;User;español;2024-06-26 09:24:49;Language change;;;No;;
TTdykpdTOfRVBfX;User;si estas para ayudar ayudame;2024-06-26 09:25:19;Uncategorized;;;Yes;;
TTdykpdTOfRVBfX;User;"while(first!=null){
    System.out.println(first.getInfo())
    first=first.getNext()
} de un array list con 10 nodos cuantos quedan cuando termine esto";2024-06-26 09:25:49;Debugging Help;;;Yes;;
TTdykpdTOfRVBfX;User;y en que nodo acaba;2024-06-26 09:26:04;Debugging Help;;;No;;
TTdykpdTOfRVBfX;User;"static int m(int a, int b) {
    if (a <= b) return (1);
    if (a%2== b % 2) return (1 + m(a - 1, b + 1));
    else return (m(a, b - 1));
}";2024-06-26 12:18:38;Code Snippet;;;Yes;;
TTdykpdTOfRVBfX;User;simetes m(10,1);2024-06-26 12:18:50;Debugging Help;;;Yes;;
TTdykpdTOfRVBfX;User;como obtienes el m(9,2);2024-06-26 12:19:50;Debugging Help;;;No;;
TTdykpdTOfRVBfX;User;como pasas de m(10,1) a m(9,2);2024-06-26 12:20:13;Debugging Help;;;No;;
TTdykpdTOfRVBfX;User;pero que comandos hace para ser 9 y 2;2024-06-26 12:25:47;Debugging Help;;;No;;
o1cVBTlROWH0Qcw;User;que es un bytecode?;2024-06-25 16:37:06;Conceptual Questions;;;Yes;;
o1cVBTlROWH0Qcw;User;a . Los bytecodes son la representación intermedia del código fuente Java y son ejecutados por la JVM (Java Virtual Machine). b. Los bytecodes son archivos de código fuente en Java. c. Los bytecodes son ejecutados directamente por la CPU. d. Los bytecodes son solo utilizados durante la fase de compilación en Java.;2024-06-25 16:37:35;Multiple Question Exercise;;;Yes;;
o1cVBTlROWH0Qcw;User;Cual es la correcta?;2024-06-25 16:37:47;Multiple Question Exercise;;;Yes;;
o1cVBTlROWH0Qcw;User;a. Una clase abstracta no puede ser instanciada directamente. b. Una clase abstracta puede tener todos sus métodos implementados. c. Una clase abstracta tiene todos sus atributos definidos como final y static. d. La clase hija de una clase abstracta, no puede ser abstracta.;2024-06-25 16:39:11;Multiple Question Exercise;;;Yes;;
o1cVBTlROWH0Qcw;User;"public class A {
  public static int varA = 0;
}
public class B extends A {
  public static void main(String[] args) {
    A.varA = 2;
    B a3 = new B();
    B.varA = 3;
    System.out.println(A.varA);
  }
}
por que el resultado es 3?";2024-06-25 16:47:18;Debugging Help;;;Yes;;
o1cVBTlROWH0Qcw;User;que hace protected en atributos;2024-06-25 16:51:12;Conceptual Questions;;;Yes;;
o1cVBTlROWH0Qcw;User;"public int method() {
  try {
    int leftTree = getLeft().method ();
    int rightTree = getRight().method();
    return 1 + Math.max(leftTree, rightTree);
  }catch (BTreeException e) {
    return 1;
  }
}
que devuelve este metodo?";2024-06-25 16:55:33;Debugging Help;;;Yes;;
o1cVBTlROWH0Qcw;User;"public class A {
  private int a;
  private int b;
  public A(int a, int b) {
    this.a = a;
    this.b = b;
  }
  public A(int a) {
    this(a, 1);
  }
  public A() {
    this(1);
  }
  public String toString() {
    return """" + a + "","" + b;
  }
}";2024-06-25 18:13:38;Debugging Help;;;No;;
o1cVBTlROWH0Qcw;User;"public E dequeue(){
  E info;
  if (!isEmpty()) {
    info = head.getInfo();
    head = head.getNext();
    size--;
  } else {
    info = null;
  }
  return info;
}";2024-06-25 18:16:48;Debugging Help;;;No;;
o1cVBTlROWH0Qcw;User;es mas eficiente un metodo O(log n) o O(n al cuadrado);2024-06-25 18:42:02;Conceptual Questions;;;Yes;;
o1cVBTlROWH0Qcw;User;NullPointerException;2024-06-25 18:44:12;Conceptual Questions;;;Yes;;
o1cVBTlROWH0Qcw;User;si una clase implementa una interfaz y a la vez hereda de otra clase como se escribe?;2024-06-25 18:51:30;Code Snippet;;;Yes;;
o1cVBTlROWH0Qcw;User;tipos de recursion;2024-06-25 18:55:57;Conceptual Questions;;;Yes;;
o1cVBTlROWH0Qcw;User;pruebas de aceptacion;2024-06-25 19:01:57;Conceptual Questions;;;Yes;;
o1cVBTlROWH0Qcw;User;arrayIndexOutOfBoundsException;2024-06-26 09:39:45;Conceptual Questions;;;Yes;;
o1cVBTlROWH0Qcw;User;NullPointerException;2024-06-26 09:46:32;Conceptual Questions;;;Yes;;
o1cVBTlROWH0Qcw;User;que quiere decir n--;2024-06-26 10:00:22;Conceptual Questions;;;Yes;;
o1cVBTlROWH0Qcw;User;y ++m?;2024-06-26 10:00:33;Conceptual Questions;;;Yes;;
o1cVBTlROWH0Qcw;User;como se cuantos swaps tiene que hacer cada algoritmo de ordanación para ordenar un array;2024-06-26 10:45:34;Conceptual Questions;;;Yes;;
o1cVBTlROWH0Qcw;User;"¿Cuántas operaciones de intercambio de posiciones o ""swaps"" requeriría hacer el algoritmo QuickSort para ordenar el array {5,1,10,9,3} de forma ascendente?";2024-06-26 10:46:19;Complete Solution;;;Yes;;0 days 00:00:00
o1cVBTlROWH0Qcw;User;el pivote es 5;2024-06-26 10:47:01;Debugging Help;;;Yes;;
weAEdYae8v5Ol75;User;"1.- En el esqueleto de c´odigo que se presenta a continuaci´on, ¿c´omo debe implementarse en la l´ınea 03 la zona indicada con /* TO DO /?
01 public class Point{
02   private double x, y;
03   public Point(double x, double y) { / TO DO / }
04   public Point() { / TO DO / }
05   public double getX() { / TO DO / }
06   public void setX(double x){ / TO DO / }
07   public double getY() { / TO DO / }
08   public void setY(double y){ / TO DO / }
09   public double distance() {/ TO DO / }
10   public double distance(Point otroPunto) {/ TO DO */ }
11 }
(a) *** this.x = x; this.y = y;
(b) x = this.x; y = this.y;
(c) Los argumentos del constructor deben tener un nombre diferente al de los atributos de la clase. De otro modo, no puede implementarse.
(d) No es necesario incluir c´odigo, los argumentos ya dicen los valores que tendr´an x e y.";2024-06-26 09:21:34;Multiple Question Exercise;;;;Yes;
weAEdYae8v5Ol78;User;pero no habria que hacer un constructor?;2024-06-26 09:21:58;Conceptual Questions;;;;Yes;
weAEdYae8v5Ol81;User;"Dado el siguiente montículo (min-heap) {1,2,7,8,5,10,9}, cuando se añade el valor 4 ¿cuántos intercambios hay que realizar?
a. 3
b. 4
c. 2
d. 1";2024-06-26 09:32:24;Multiple Question Exercise;;;;Yes;
weAEdYae8v5Ol84;User;"Dado el siguiente montículo (min-heap) {1,2,7,8,5,10,9}, cuando se añade el valor 4 ¿cuántos intercambios hay que realizar?
a. 3
b. 4
c. 2
d. 1";2024-06-26 09:32:31;Multiple Question Exercise;;;;Yes;
weAEdYae8v5Ol87;User;Dado un árbol binario completo definido por el array {2, 9, 5, 4, 7, 6} ¿cuál es el resultado de invocar a toStringPostOrder()?;2024-06-26 09:33:31;Complete Solution;;;;Yes;0 days 00:00:00
weAEdYae8v5Ol90;User;"que significa esto
a. Lineal no por cola
b. Lineal por la cola
c. No lineal en cascada
d. No lineal anidado";2024-06-26 09:35:32;Multiple Question Exercise;;;;Yes;
weAEdYae8v5Ol93;User;"¿Qué tipo de recursión implementa el método bluf?
int bluf(int a, int b){
    if (b == 0)
        return(2*a);
    else if (a%2 == 0)
        return(bluf(3*a-1,b));
    else
        return(bluf(a-1,b-1));
}
a. Lineal no por cola
b. Lineal por la cola
c. No lineal en cascada
d. No lineal anidado";2024-06-26 09:35:42;Multiple Question Exercise;;;;Yes;
weAEdYae8v5Ol96;User;es la b.;2024-06-26 09:35:54;Correction;;;;No;
weAEdYae8v5Ol99;User;es la b, te equivocas;2024-06-26 09:36:09;Student Correction;;;;No;
weAEdYae8v5Ol102;User;Si T es un árbol binario completo representado por el array {1,7,5,9,3,8,1,4,5,7,2,4,6,7,2} ¿cuál es número de nodos externos de T?;2024-06-26 09:36:51;Complete Solution;;;;Yes;0 days 00:00:00
weAEdYae8v5Ol105;User;"Si stack es un objeto de la clase LinkedStack, ¿qué se obtiene en la pantalla tras la ejecución del siguiente fragmento de código?
stack.push(3)
stack.push(2)
stack.push(9)
stack.push(stack.pop()*stack.pop());
stack.push(stack.pop()+stack.pop());
System.out.println(stack.pop());";2024-06-26 09:37:34;Debugging Help;;;;Yes;
weAEdYae8v5Ol108;User;"Si G es un árbol binario de búsqueda vacío y en él se insertan sucesivamente , y en el orden dado, los valores: 5,9,13,12,25,17,28 y 10 ¿cuál es la altura del árbol resultante?
a. 6
b. 5
c. 7
d. 4";2024-06-26 09:39:03;Multiple Question Exercise;;;;Yes;
weAEdYae8v5Ol111;User;es 4 la solucion;2024-06-26 09:39:24;Student Correction;;;;No;
weAEdYae8v5Ol114;User;"Programa el método void insert(E info) de la clase MyLinkedList, que inserta de forma ordenada (menor a mayor) y sin repeticiones (en caso de repetición no se inserta), la baliza que recibe como parámetro el método (las que se detecten por bluetooth en la aplicación, de esto no tienes que preocuparte).

public void insert(E info){
Node newNode(info) = new Node;
Node aux = first;
if(first == null){
    newNode = first;
}else{
    while(aux != null){
        newNode = first;
        if((newNode.getInfo() < aux.getInfo()) || (newNode.getInfo() == aux.getInfo)){
            newNode.setNext(getNext());
            aux.setNext(getNext());
        }else if(newNode.getInfo() > aux.getInfo(){";2024-06-26 10:13:43;Complete Solution;;;;Yes;0 days 00:00:00
weAEdYae8v5Ol117;User;"public boolean search(E info){
Node aux = first;
if(aux.getInfo() != compareTo){
    aux.setNext(getNext());
        return false;
}else if (aux.getInfo == compareTo(info)){
    return true;";2024-06-26 10:17:30;Code Snippet;;;;Yes;
weAEdYae8v5Ol120;User;"public boolean testEquals(){
    if(tree.isEmpty()){
        return false;
    }else if(getLeft.isEmpty || getRight.isEmpty()){
            return false;
    }else if(getLeft.testEquals() && getRight.testEquals()){
        return true;
    }else{
        return false;
}";2024-06-26 10:20:43;Code Snippet;;;;Yes;
weAEdYae8v5Ol123;User;"Completa el método boolean testEquals() que comprueba si los dos árboles binarios construidos son iguales. El resultado obtenido será true si los árboles son iguales y false si no lo son.
public boolean testEquals(){
if(tree.isEmpty()){
return false;
}else if(getLeft.isEmpty || getRight.isEmpty()){
return false;
}else if(getLeft.testEquals() && getRight.testEquals()){
return true;
}else{
return false;
}";2024-06-26 10:21:07;Code Snippet;;;;Yes;
weAEdYae8v5Ol126;User;haz el mismo codigo siin esto;2024-06-26 10:21:29;Code Snippet;;;;Yes;
weAEdYae8v5Ol129;User;sin esto BinaryTree otherTree;2024-06-26 10:21:36;Code Snippet;;;;Yes;
P2cNHFaEwWD0Fwz;User;"esta bien escrito el siguiente codigo
public class ProfessionalAccount extends Account {
    private String company;
    public ProfessionalAccount(String username, String password, String company) throws PasswordException {
        super(username, password);
        this.company = company;
    }
    public String getCompany() {
        return company;
    }
    public void setPassword(String password) throws PasswordException {
        if(password.equals(getUsername()) {
            throw new PasswordException(""El nombre y la contraseña no pueden ser iguales"");
        } else {
            this.password = password;
        }
    }
}";2024-06-21 14:54:13;Debugging Help;;;;Yes;
P2cNHFaEwWD0Fwz;User;¿Cuántos swaps se necesitan para ordenar de menor a mayor el siguiente array 5,3,4,1,2 utilizado Heap Sort?;2024-06-21 15:45:17;Complete Solution;;;;Yes;0 days 00:00:00
P2cNHFaEwWD0Fwz;User;"public int leafs(BTree tree) throws BTreeException {
    int contador = 0;
    try {
        if(tree.isEmpty()) {
            contador = 0;
        } else {
            if(tree.getLeft().isEmpty() && tree.getRight().isEmpty()) {
                contador = 1;
            } else {
                contador = 1 + leafs(tree.getLeft()) + leafs(tree.getRight());
            }
        }
    } catch(e BTreeException) {
        e.PrintStackTrace();
    }
}";2024-06-21 16:35:16;Debugging Help;;;;Yes;
P2cNHFaEwWD0Fwz;User;"public int leafs(BTree tree) throws BTreeException {
    int contador = 0;
    try {
        if(tree.isEmpty()) {
            contador = 0;
        } else {
            if(tree.getLeft().isEmpty() && tree.getRight().isEmpty()) {
                contador = 1;
            } else {
                contador = 1 + leafs(tree.getLeft()) + leafs(tree.getRight());
            }
        }
    } catch(BTreeException e) {
        e.PrintStackTrace();
    }
    return contador;
}";2024-06-21 16:36:09;Debugging Help;;;;Yes;
P2cNHFaEwWD0Fwz;User;"public void selectionSort() {
    fot(int i = 0; i < orderList.size(); i++) {
        int minIndex = i;
        for(int j = i + 1; j < orderList.size(); j++) {
            if(orderList.get(j).compareTo(orderList.get(minIndex)) < 0) {
                minIndex = j;
            }
        }
        //swaps
        Order auxiliar = orderList.get(minIndex);
        orderList.set(minIndex, orderList.get(i));
        orderList.set(i, auxiliar);
    }
}";2024-06-25 08:23:22;Debugging Help;;;;Yes;
P2cNHFaEwWD0Fwz;User;"public int numOcurrences(E info) {
    int contador = 0;
    Node auxuliar = first;
    while(first != null) {
        if(auxiliar.getInfo().equals(info)) {
            contador++;
            auxiliar = auxiliar.getNext();
        }
    }
    return contador;
}";2024-06-25 09:15:58;Debugging Help;;;;Yes;
P2cNHFaEwWD0Fwz;User;porque mueves auxiliar = auxiliar.getNext() fuera del if?;2024-06-25 09:17:02;Debugging Help;;;;No;
P2cNHFaEwWD0Fwz;User;en español;2024-06-25 09:17:09;Language change;;;;No;
P2cNHFaEwWD0Fwz;User;"public void InsertionSort() {
    for(int i = 0; i < list.size(); i++) {
        InvoicedOrder temporal = list.get(i);
        int j = i;
        while(j > 0 && list.get(j).compareTo(list.get(temporal)) > 0) {
            list.set(j, list.get(j - 1));
            j--;
        }
        //swaps
        list.set(j, temporal);
    }
}";2024-06-25 09:27:41;Debugging Help;;;;Yes;
P2cNHFaEwWD0Fwz;User;en español;2024-06-25 09:27:50;Language change;;;;No;
P2cNHFaEwWD0Fwz;User;estarian ordenados asi de mayor a menor?;2024-06-25 09:28:33;Debugging Help;;;;No;
P2cNHFaEwWD0Fwz;User;Dado el mont´ıculo de clave m´ınima (min-heap) resultante de insertar de uno en uno ordenadamente la secuencia de nodos {5, 1, 3, 2, 7}, indica cu´al de los siguientes arrays se corresponde con el mont´ıculo resultante tras realizar una operaci´on extract() sobre el mont´ıculo construido.;2024-06-25 09:51:47;Multiple Question Exercise;;;;Yes;
P2cNHFaEwWD0Fwz;User;"porque este metodo es el removeLast, explicamelo public E m(){
E result = null;
if(tail.getPrev()!=top){
result = tail.getPrev().getInfo();
tail.setPrev(tail.getPrev().getPrev());
tail.getPrev().getPrev().setNext(tail);
size--;
}
return result;
}";2024-06-25 09:59:43;Debugging Help;;;;No;
P2cNHFaEwWD0Fwz;User;pero cuales el nodo tail?;2024-06-25 10:00:06;Debugging Help;;;;No;
P2cNHFaEwWD0Fwz;User;"public class ClassA{
public void m(int a) { ; }
public void m(float b) { ; }
public void m(int c) { ; }
public void m(double d) { ; }
}
porque La sobrecarga public void m(int c) no es correcta";2024-06-25 10:06:18;Debugging Help;;;;Yes;
P2cNHFaEwWD0Fwz;User;que es una excepci´on ArrayIndexOutOfBoundsException;2024-06-25 10:08:24;Conceptual Questions;;;;Yes;
P2cNHFaEwWD0Fwz;User;"porque deberian intercambiarse las dos ultimas lineas del siguiente metodo?public void insert(E info, Node previous) {
 if(previous!=null) {
 Node newNode = new Node(info);
 previous.setNext(newNode);
 newNode.setNext(previous.getNext());
 }
}";2024-06-25 14:34:26;Debugging Help;;;;No;
P2cNHFaEwWD0Fwz;User;Una clase abstracta no puede ser instanciada directamente;2024-06-25 14:39:56;Conceptual Questions;;;;Yes;
P2cNHFaEwWD0Fwz;User;"¿Que devuelve el siguiente método?:
public int method() {
 try {
 int leftTree = getLeft().method ();
 int rightTree = getRight().method();
 return 1 + Math.max(leftTree, rightTree);
 }catch (BTreeException e) {
 return 1;
 }
}";2024-06-25 14:52:20;Debugging Help;;;;No;
P2cNHFaEwWD0Fwz;User;que significa el step return;2024-06-25 15:21:53;Conceptual Questions;;;;Yes;
P2cNHFaEwWD0Fwz;User;que es un NullPointerException;2024-06-25 15:24:58;Conceptual Questions;;;;Yes;
P2cNHFaEwWD0Fwz;User;"porque este codigo lanza una excepcion de ese tipo?
public class LBNode {
 private E info;
 private LBNode left;
 private LBNode right;
 (...)
 public int m() {
 return 1 + left.m() + right.m();
 }
 }";2024-06-25 15:25:58;Debugging Help;;;;No;
P2cNHFaEwWD0Fwz;User;Dado el siguiente montículo (min-heap) {1,2,7,8,5,10,9}, cuando se añade el valor 4 ¿cuántos intercambios hay que realizar?;2024-06-25 15:31:58;Complete Solution;;;;Yes;0 days 00:00:00
P2cNHFaEwWD0Fwz;User;por;2024-06-25 15:32:05;Uncategorized;;;;Yes;
P2cNHFaEwWD0Fwz;User;que significa .front en una cola;2024-06-26 09:12:49;Debugging Help;;;;No;
ZNQqaWTJ88tgvHc;User;"tengo que invertir una lista y llevo esto public void invert(){ 
    Node aux = new Node; 
    if(first == null){ 
        newNode = first; 
    }else{ 
        while(!IntegerQueue.isEmpty()){ 
            aux = first; 
            if(aux.getNext() != null){ 
                aux.setNext(getNext); 
            }else{ 
                aux = first;";2024-06-25 21:50:41;Debugging Help;Yes;;;;
ZNQqaWTJ88tgvHc;User;podrias hacerlo con solo un nodo auxiliar?;2024-06-25 21:51:14;Debugging Help;Yes;;;;
ZNQqaWTJ88tgvHc;User;"explicame esto por favor 
        next = current.getNext();
        current.setNext(prev);
        prev = current;
        current = next;";2024-06-25 21:51:50;Debugging Help;No;;;;
ZNQqaWTJ88tgvHc;User;"una cola que busca el mismo elemento public boolean search(Integer element){ 
    Node aux = new Node; 
    if(first == null){ 
        aux = first; 
    }else{ 
        while(!isEmpty()){ 
            if(aux.getInfo != element){ 
                aux.setNext(getNext); 
            return false; 
        }else if(aux.getInfo == element){ 
            return true;  
    }";2024-06-25 21:57:36;Debugging Help;Yes;;;;
ZNQqaWTJ88tgvHc;User;"public boolean search(Integer element){ 
    Node aux = first; 
    while(aux != null){ 
        if(aux.getInfo != element){ 
            aux.setNext(getNext); 
    }else if(aux.getInfo == element){ 
        return true; 
    } 
    return false;  
}";2024-06-25 21:59:33;Debugging Help;Yes;;;;
